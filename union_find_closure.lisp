(defun gen-uf-tree (size)
  (let ((parents (make-array size :initial-element -1)))
    (labels ((uf-find (x)
               (if (minusp (aref parents x))
                   x
                   (uf-find (aref parents x))))
             (unite (x y)
               (when (> x y)
                 (rotatef x y))
               (setf (aref parents y)
                     x))
             (friends-p (x y)
               (= (uf-find x)
                  (uf-find y))))
      #'(lambda (&rest args)
          (let ((query (first args))
                (args (rest args)))
            (case query
              (uf-find (apply #'find args))
              (unite (apply #'unite args))
              (friends-p (apply #'friends-p args))))))))
