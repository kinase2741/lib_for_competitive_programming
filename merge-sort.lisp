(declaim (inline merge-sort)
         (ftype (function (list function &key (:key function)) list) merge-sort))
(defun merge-sort (list predicate &key (key #'identity))
       (declare (list list)
                (function predicate key))
       (labels ((%insert (x xs))
                (%insertion-sort (xs acc)
                  )
                (%ordered-p (x y)
                  (funcall predicate
                           (funcall key x)
                           (funcall key y)))
                (%merge-sort (xs)
                  (declare (list xs))
                  (the list
                       (cond
                         ((null (rest xs)) xs)
                         ((null (cddr xs))
                          (if (%ordered-p (first xs) (second xs))
                              xs
                              (nreverse xs)))
                         (t (multiple-value-bind (left right)
                                (%split-list xs)
                              (%merge-lists (%merge-sort left)
                                            (%merge-sort right)))))))
                (%split-list (xs)
                  (declare (list xs))
                  (let* ((half-of-length (ash (length xs) -1))
                         (right (nthcdr (1+ half-of-length) xs)))
                    (declare (list right)
                             (fixnum half-of-length))
                    (labels ((set-nthcdr! (n list)
                               (declare (fixnum n)
                                        (list list))
                               (if (zerop n)
                                   (setf (rest list) nil)
                                   (set-nthcdr! (1- n) (rest list)))))
                      (declare (ftype (function (fixnum list) *) set-nthcdr!))
                      (set-nthcdr! half-of-length xs)
                      (values xs right))))
                (%merge-lists (xs ys)
                  (declare (list xs ys))
                  (loop while (or xs ys)
                     with res of-type list = nil
                     if (null ys)
                     return (nconc (nreverse res) xs)
                     else if (null xs)
                     return (nconc (nreverse res) ys)
                     else if (and xs
                                  (%ordered-p (first xs)
                                              (first ys)))
                     do (push (pop xs) res)
                     else
                     do (push (pop ys) res)
                     finally
                       (return (nreverse res)))))
         (declare (inline %ordered-p %split-list %merge-lists)
                  (ftype (function (* *) boolean) %ordered-p)
                  (ftype (function (list) list) %merge-sort)
                  (ftype (function (list) (values list list)) %split-list)
                  (ftype (function (list list) list) %merge-lists))
         (%merge-sort list)))
