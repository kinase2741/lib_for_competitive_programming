(defstruct (q (:type list))
  (begin 0 :type fixnum)
  (end 0 :type fixnum))

(defun quick-sort (simple-array begin end)
  "Destructively sort simple-array."
  (declare ((simple-array fixnum 1) simple-array)
           (fixnum begin end))
  (loop with stack of-type list = (list (make-q :begin begin
                                                :end end))
        while (not (null stack))
        for (begin end) of-type (fixnum fixnum) = (pop stack)
        when (<= begin end)
          do (let ((pivot (aref simple-array (+ begin (random (1+ (- end begin))))))
                   (i begin)
                   (j end))
               (declare (fixnum pivot i j))
               (loop do (loop while (< (aref simple-array i)
                                       pivot)
                              do (incf i))
                        (loop while (> (aref simple-array j)
                                       pivot)
                              do (decf j))
                     when (> i j)
                       do (return)
                     do (rotatef (aref simple-array i)
                                 (aref simple-array j))
                     do (incf i)
                     do (decf j))
               (cond ((< (- i begin)
                         (- end j))
                      (push (make-q :begin (1+ j)
                                    :end end)
                            stack)
                      (setq end (1- i)))
                     (t 
                      (push (make-q :begin begin
                                    :end (1- i))
                            stack)
                      (setq begin (1+ j)))))))
